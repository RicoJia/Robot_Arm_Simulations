#!/usr/bin/env python
'''
Marker for drawing points in the robot arm simulation
'''

import rospy
from geometry_msgs.msg import Point
from visualization_msgs.msg import Marker


class marker_line_strip(object):
    def __init__(self):

        self.marker=Marker()
        self.marker.header.frame_id = "trajectory"
        self.marker.header.stamp = rospy.Time.now()
        self.marker.id = 1
        self.marker.type = Marker.LINE_STRIP   #TODO:?
        self.marker.ns = "line_strip"

        self.marker.action = Marker.ADD  #??

        self.marker.pose.orientation.w = 1.0
        # Set the scale of the marker -- 1x1x1 here means 1m on a side
        self.marker.scale.x = 0.05

         #Set the color -- be sure to set alpha to something non-zero!
        self.marker.color.r = 0.0
        self.marker.color.g = 1.0
        self.marker.color.b = 0.0
        self.marker.color.a = 1.0

        self.marker.lifetime = rospy.Duration.from_sec(rospy.get_param("/heart_drawing_arm/T")*4.0/5.0)
        self.main_loop()
    def main_loop(self):
        init_time  = rospy.Time.now().to_sec()
        #T_marker = rospy.get_param("/heart_drawing_arm/T_marker")
        T_marker = 0.05
        marker_pub = rospy.Publisher("visualization_marker",Marker,queue_size = 0)
        while True:
            x0 = 2.0
            i = 0.0
            while rospy.Time.now().to_sec() - init_time < T_marker:
                point = Point()
                point.x = x0+i*0.1
                point.y = 0
                point.z = 0
                i+=1.0
                self.marker.points.append(point)

            marker_pub.publish(self.marker)
            init_time = rospy.Time.now().to_sec()
            self.marker.points = []



def main():
    rospy.init_node("marker_fun")
    marker_line_strip()
    rospy.spin()

if __name__ == "__main__":
    main()
